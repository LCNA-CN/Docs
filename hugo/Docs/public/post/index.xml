<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on LCNA Docs</title>
    <link>https://docs.lcna.cn/post/</link>
    <description>Recent content in Posts on LCNA Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://docs.lcna.cn/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a New Theme</title>
      <link>https://docs.lcna.cn/post/dps/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://docs.lcna.cn/post/dps/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>https://docs.lcna.cn/post/creating-a-new-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.lcna.cn/post/creating-a-new-theme/</guid>
      <description>&lt;!---&#xA;author: &#34;Michael Henderson&#34;&#xA;date: 2014-09-28&#xA;linktitle: Creating a New Theme&#xA;menu:&#xA;  main:&#xA;    parent: Tutorials&#xA;next: /tutorials/github-pages-blog&#xA;prev: /tutorials/automated-deployments&#xA;title: Creating a New Theme&#xA;weight: 10&#xA;---&#xA;&#xA;&#xA;## Introduction&#xA;&#xA;This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&#39;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&#39;t cover using CSS to style your theme.&#xA;&#xA;We&#39;ll start with creating a new site with a very basic template. Then we&#39;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.&#xA;&#xA;In this tutorial, commands that you enter will start with the &#34;$&#34; prompt. The output will follow. Lines that start with &#34;#&#34; are comments that I&#39;ve added to explain a point. When I show updates to a file, the &#34;:wq&#34; on the last line means to save the file.&#xA;&#xA;Here&#39;s an example:&#xA;&#xA;```&#xA;## this is a comment&#xA;$ echo this is a command&#xA;this is a command&#xA;&#xA;## edit the file&#xA;$ vi foo.md&#xA;+++&#xA;date = &#34;2014-09-28&#34;&#xA;title = &#34;creating a new theme&#34;&#xA;+++&#xA;&#xA;bah and humbug&#xA;:wq&#xA;&#xA;## show it&#xA;$ cat foo.md&#xA;+++&#xA;date = &#34;2014-09-28&#34;&#xA;title = &#34;creating a new theme&#34;&#xA;+++&#xA;&#xA;bah and humbug&#xA;$&#xA;```&#xA;&#xA;&#xA;## Some Definitions&#xA;&#xA;There are a few concepts that you need to understand before creating a theme.&#xA;&#xA;### Skins&#xA;&#xA;Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.&#xA;&#xA;You have two ways to create a skin. The simplest way is to create it in the ```layouts/``` directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the ```layouts/``` directory so it will always find the skin.&#xA;&#xA;Your second choice is to create it in a sub-directory of the ```themes/``` directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?&#xA;&#xA;The difference between creating a skin in ```layouts/``` and creating it in ```themes/``` is very subtle. A skin in ```layouts/``` can’t be customized without updating the templates and static files that it is built from. A skin created in ```themes/```, on the other hand, can be and that makes it easier for other people to use it.&#xA;&#xA;The rest of this tutorial will call a skin created in the ```themes/``` directory a theme.&#xA;&#xA;Note that you can use this tutorial to create a skin in the ```layouts/``` directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.&#xA;&#xA;### The Home Page&#xA;&#xA;The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.&#xA;&#xA;### Site Configuration File&#xA;&#xA;When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.&#xA;&#xA;Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your ```content/``` directory and template files in your ```themes/``` directory. It will create HTML files in your ```public/``` directory. You can change this by specifying alternate locations in the configuration file.&#xA;&#xA;### Content&#xA;&#xA;Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.&#xA;&#xA;#### Front Matter&#xA;&#xA;The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “`+++`”, YAML by “`---`”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.&#xA;&#xA;The information in the front matter is passed into the template before the content is rendered into HTML.&#xA;&#xA;#### Markdown&#xA;&#xA;Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.&#xA;&#xA;### Template Files&#xA;&#xA;Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&#39;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.&#xA;&#xA;There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.&#xA;&#xA;Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.&#xA;&#xA;Please note that you can use the front matter to influence Hugo’s choice of templates.&#xA;&#xA;#### Single Template&#xA;&#xA;A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.&#xA;&#xA;#### List Template&#xA;&#xA;A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.&#xA;&#xA;The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.&#xA;&#xA;#### Partial Template&#xA;&#xA;A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.&#xA;&#xA;## Create a New Site&#xA;&#xA;Let&#39;s use Hugo to create a new web site. I&#39;m a Mac user, so I&#39;ll create mine in my home directory, in the Sites folder. If you&#39;re using Linux, you might have to create the folder first.&#xA;&#xA;The &#34;new site&#34; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.&#xA;&#xA;```&#xA;$ hugo new site ~/Sites/zafta&#xA;$ cd ~/Sites/zafta&#xA;$ ls -l&#xA;total 8&#xA;drwxr-xr-x  7 quoha  staff  238 Sep 29 16:49 .&#xA;drwxr-xr-x  3 quoha  staff  102 Sep 29 16:49 ..&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes&#xA;-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 hugo.toml&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static&#xA;$&#xA;```&#xA;&#xA;Take a look in the content/ directory to confirm that it is empty.&#xA;&#xA;The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That&#39;s a topic for a different tutorial, so please ignore them for now.&#xA;&#xA;### Generate the HTML For the New Site&#xA;&#xA;Running the `hugo` command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&#39;s everything that&#39;s not content). Since we have an empty site, it won&#39;t do much, but it will do it very quickly.&#xA;&#xA;```&#xA;$ hugo --verbose&#xA;INFO: 2014/09/29 Using config file: hugo.toml&#xA;INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/&#xA;WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]&#xA;WARN: 2014/09/29 Unable to locate layout: [404.html]&#xA;0 draft content&#xA;0 future content&#xA;0 pages created&#xA;0 tags created&#xA;0 categories created&#xA;in 2 ms&#xA;$&#xA;```&#xA;&#xA;The &#34;`--verbose`&#34; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &#34;INFO:&#34; or &#34;WARN:&#34; is present because we used that flag. The lines that start with &#34;WARN:&#34; are warning messages. We&#39;ll go over them later.&#xA;&#xA;We can verify that the command worked by looking at the directory again.&#xA;&#xA;```&#xA;$ ls -l&#xA;total 8&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes&#xA;-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 hugo.toml&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts&#xA;drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static&#xA;$&#xA;```&#xA;&#xA;See that new public/ directory? Hugo placed all generated content there. When you&#39;re ready to publish your web site, that&#39;s the place to start. For now, though, let&#39;s just confirm that we have what we&#39;d expect from a site with no content.&#xA;&#xA;```&#xA;$ ls -l public&#xA;total 16&#xA;-rw-r--r--  1 quoha  staff  416 Sep 29 17:02 index.xml&#xA;-rw-r--r--  1 quoha  staff  262 Sep 29 17:02 sitemap.xml&#xA;$&#xA;```&#xA;&#xA;Hugo created two XML files, which is standard, but there are no HTML files.&#xA;&#xA;&#xA;&#xA;### Test the New Site&#xA;&#xA;Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &#34;server&#34; command. If it is successful, you will see output similar to the following:&#xA;&#xA;```&#xA;$ hugo server --verbose&#xA;INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml&#xA;INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/&#xA;WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]&#xA;WARN: 2014/09/29 Unable to locate layout: [404.html]&#xA;0 draft content&#xA;0 future content&#xA;0 pages created&#xA;0 tags created&#xA;0 categories created&#xA;in 2 ms&#xA;Serving pages from /Users/quoha/Sites/zafta/public&#xA;Web Server is available at http://localhost:1313&#xA;Press Ctrl+C to stop&#xA;```&#xA;&#xA;Connect to the listed URL (it&#39;s on the line that starts with &#34;Web Server&#34;). If everything is working correctly, you should get a page that shows the following:&#xA;&#xA;```&#xA;index.xml&#xA;sitemap.xml&#xA;```&#xA;&#xA;That&#39;s a listing of your public/ directory. Hugo didn&#39;t create a home page because our site has no content. When there&#39;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.&#xA;&#xA;Let’s go back and look at those warnings again.&#xA;&#xA;```&#xA;WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]&#xA;WARN: 2014/09/29 Unable to locate layout: [404.html]&#xA;```&#xA;&#xA;That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.&#xA;&#xA;Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.&#xA;&#xA;I like that the verbose flag causes Hugo to list the files that it&#39;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we&#39;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&#39;t find a template for the home page and it told you so.&#xA;&#xA;At this point, you&#39;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.&#xA;&#xA;## Create a New Theme&#xA;&#xA;Hugo doesn&#39;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.&#xA;&#xA;We&#39;re going to create a new theme called &#34;zafta.&#34; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.&#xA;&#xA;All themes have opinions on content and layout. For example, Zafta uses &#34;post&#34; over &#34;blog&#34;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.&#xA;&#xA;&#xA;### Create a Skeleton&#xA;&#xA;Use the hugo &#34;new&#34; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.&#xA;&#xA;```&#xA;$ hugo new theme zafta&#xA;&#xA;$ ls -l&#xA;total 8&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes&#xA;-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 hugo.toml&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts&#xA;drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static&#xA;drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes&#xA;&#xA;$ find themes -type f | xargs ls -l&#xA;-rw-r--r--  1 quoha  staff  1081 Sep 29 17:31 themes/zafta/LICENSE.md&#xA;-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/archetypes/default.md&#xA;-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/list.html&#xA;-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/single.html&#xA;-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/index.html&#xA;-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html&#xA;-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/header.html&#xA;-rw-r--r--  1 quoha  staff    93 Sep 29 17:31 themes/zafta/theme.toml&#xA;$&#xA;```&#xA;&#xA;The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.&#xA;&#xA;Please take a minute to fill out the theme.toml and LICENSE.md files. They&#39;re optional, but if you&#39;re going to be distributing your theme, it tells the world who to praise (or blame). It&#39;s also nice to declare the license so that people will know how they can use the theme.&#xA;&#xA;```&#xA;$ vi themes/zafta/theme.toml&#xA;author = &#34;michael d henderson&#34;&#xA;description = &#34;a minimal working template&#34;&#xA;license = &#34;MIT&#34;&#xA;name = &#34;zafta&#34;&#xA;source_repo = &#34;&#34;&#xA;tags = [&#34;tags&#34;, &#34;categories&#34;]&#xA;:wq&#xA;&#xA;## also edit themes/zafta/LICENSE.md and change&#xA;## the bit that says &#34;YOUR_NAME_HERE&#34;&#xA;```&#xA;&#xA;Note that the the skeleton&#39;s template files are empty. Don&#39;t worry, we&#39;ll be changing that shortly.&#xA;&#xA;```&#xA;$ find themes/zafta -name &#39;*.html&#39; | xargs ls -l&#xA;-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html&#xA;-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/single.html&#xA;-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/index.html&#xA;-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html&#xA;-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/header.html&#xA;$&#xA;```&#xA;&#xA;&#xA;&#xA;### Update the Configuration File to Use the Theme&#xA;&#xA;Now that we&#39;ve got a theme to work with, it&#39;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &#34;-t zafta&#34; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&#39;t put it in the configuration file or specify it on the command line, you won&#39;t use the template that you&#39;re expecting to.&#xA;&#xA;Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.&#xA;&#xA;```&#xA;$ vi hugo.toml&#xA;theme = &#34;zafta&#34;&#xA;baseurl = &#34;&#34;&#xA;languageCode = &#34;en-us&#34;&#xA;title = &#34;zafta - totally refreshing&#34;&#xA;MetaDataFormat = &#34;toml&#34;&#xA;:wq&#xA;&#xA;$&#xA;```&#xA;&#xA;### Generate the Site&#xA;&#xA;Now that we have an empty theme, let&#39;s generate the site again.&#xA;&#xA;```&#xA;$ hugo --verbose&#xA;INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml&#xA;INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/&#xA;INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/&#xA;WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]&#xA;0 draft content&#xA;0 future content&#xA;0 pages created&#xA;0 tags created&#xA;0 categories created&#xA;in 2 ms&#xA;$&#xA;```&#xA;&#xA;Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&#39;s directory.&#xA;&#xA;Let&#39;s check the public/ directory to see what Hugo&#39;s created.&#xA;&#xA;```&#xA;$ ls -l public&#xA;total 16&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 css&#xA;-rw-r--r--  1 quoha  staff    0 Sep 29 17:56 index.html&#xA;-rw-r--r--  1 quoha  staff  407 Sep 29 17:56 index.xml&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 js&#xA;-rw-r--r--  1 quoha  staff  243 Sep 29 17:56 sitemap.xml&#xA;$&#xA;```&#xA;&#xA;Notice four things:&#xA;&#xA;1. Hugo created a home page. This is the file public/index.html.&#xA;2. Hugo created a css/ directory.&#xA;3. Hugo created a js/ directory.&#xA;4. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn&#39;t create any pages. That&#39;s because it considers a &#34;page&#34; to be a file created directly from a content file. It doesn&#39;t count things like the index.html files that it creates automatically.&#xA;&#xA;#### The Home Page&#xA;&#xA;Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&#39;s warning message shows that it looks for three different templates:&#xA;&#xA;```&#xA;WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]&#xA;```&#xA;&#xA;If it can&#39;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.&#xA;&#xA;When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.&#xA;&#xA;```&#xA;$ find . -name index.html | xargs ls -l&#xA;-rw-r--r--  1 quoha  staff  0 Sep 29 20:21 ./public/index.html&#xA;-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 ./themes/zafta/layouts/index.html&#xA;$&#xA;```&#xA;&#xA;#### The Magic of Static&#xA;&#xA;Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.&#xA;&#xA;Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&#39;s opinion is that you&#39;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don&#39;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo&#39;s nice enough to offer its opinion, then behave nicely if you disagree.&#xA;&#xA;```&#xA;$ find themes/zafta -type d | xargs ls -ld&#xA;drwxr-xr-x  7 quoha  staff  238 Sep 29 17:38 themes/zafta&#xA;drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes/zafta/archetypes&#xA;drwxr-xr-x  5 quoha  staff  170 Sep 29 17:31 themes/zafta/layouts&#xA;drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/_default&#xA;drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/partials&#xA;drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/static&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/css&#xA;drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/js&#xA;$&#xA;```&#xA;&#xA;## The Theme Development Cycle&#xA;&#xA;When you&#39;re working on a theme, you will make changes in the theme&#39;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:&#xA;&#xA;1. Purge the public/ directory.&#xA;2. Run the built in web server in watch mode.&#xA;3. Open your site in a browser.&#xA;4. Update the theme.&#xA;5. Glance at your browser window to see changes.&#xA;6. Return to step 4.&#xA;&#xA;I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.&#xA;&#xA;Check the main Hugo site for information on using Git with Hugo.&#xA;&#xA;### Purge the public/ Directory&#xA;&#xA;When generating the site, Hugo will create new files and update existing ones in the ```public/``` directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.&#xA;&#xA;Note: If you&#39;re building on an SSD, you should ignore this. Churning on a SSD can be costly.&#xA;&#xA;### Hugo&#39;s Watch Option&#xA;&#xA;Hugo&#39;s &#34;`--watch`&#34; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.&#xA;&#xA;### Live Reload&#xA;&#xA;Hugo&#39;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &#34;Wow, that&#39;s totally amazing.&#34;&#xA;&#xA;### Development Commands&#xA;&#xA;Use the following commands as the basis for your workflow.&#xA;&#xA;```&#xA;## purge old files. hugo will recreate the public directory.&#xA;##&#xA;$ rm -rf public&#xA;##&#xA;## run hugo in watch mode&#xA;##&#xA;$ hugo server --watch --verbose&#xA;```&#xA;&#xA;Here&#39;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&#39;ve said this before, it&#39;s amazing.&#xA;&#xA;&#xA;```&#xA;$ rm -rf public&#xA;$ hugo server --watch --verbose&#xA;INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml&#xA;INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/&#xA;INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/&#xA;WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]&#xA;0 draft content&#xA;0 future content&#xA;0 pages created&#xA;0 tags created&#xA;0 categories created&#xA;in 2 ms&#xA;Watching for changes in /Users/quoha/Sites/zafta/content&#xA;Serving pages from /Users/quoha/Sites/zafta/public&#xA;Web Server is available at http://localhost:1313&#xA;Press Ctrl+C to stop&#xA;INFO: 2014/09/29 File System Event: [&#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&#34;: MODIFY|ATTRIB]&#xA;Change detected, rebuilding site&#xA;&#xA;WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]&#xA;0 draft content&#xA;0 future content&#xA;0 pages created&#xA;0 tags created&#xA;0 categories created&#xA;in 1 ms&#xA;```&#xA;&#xA;## Update the Home Page Template&#xA;&#xA;The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme&#39;s layout/ directory:&#xA;&#xA;1. index.html&#xA;2. _default/list.html&#xA;3. _default/single.html&#xA;&#xA;We could update one of the default templates, but a good design decision is to update the most specific template available. That&#39;s not a hard and fast rule (in fact, we&#39;ll break it a few times in this tutorial), but it is a good generalization.&#xA;&#xA;### Make a Static Home Page&#xA;&#xA;Right now, that page is empty because we don&#39;t have any content and we don&#39;t have any logic in the template. Let&#39;s change that by adding some text to the template.&#xA;&#xA;```&#xA;$ vi themes/zafta/layouts/index.html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;body&gt;&#xA;  &lt;p&gt;hugo says hello!&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://docs.lcna.cn/post/goisforlovers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.lcna.cn/post/goisforlovers/</guid>
      <description>&lt;!--+++&#xA;title = &#34;(Hu)go Template Primer&#34;&#xA;description = &#34;&#34;&#xA;tags = [&#xA;    &#34;go&#34;,&#xA;    &#34;golang&#34;,&#xA;    &#34;templates&#34;,&#xA;    &#34;themes&#34;,&#xA;    &#34;development&#34;,&#xA;]&#xA;date = &#34;2014-04-02&#34;&#xA;categories = [&#xA;    &#34;Development&#34;,&#xA;    &#34;golang&#34;,&#xA;]&#xA;menu = &#34;main&#34;&#xA;+++&#xA;&#xA;Hugo uses the excellent [Go][] [html/template][gohtmltemplate] library for&#xA;its template engine. It is an extremely lightweight engine that provides a very&#xA;small amount of logic. In our experience that it is just the right amount of&#xA;logic to be able to create a good static website. If you have used other&#xA;template systems from different languages or frameworks you will find a lot of&#xA;similarities in Go templates.&#xA;&#xA;This document is a brief primer on using Go templates. The [Go docs][gohtmltemplate]&#xA;provide more details.&#xA;&#xA;## Introduction to Go Templates&#xA;&#xA;Go templates provide an extremely simple template language. It adheres to the&#xA;belief that only the most basic of logic belongs in the template or view layer.&#xA;One consequence of this simplicity is that Go templates parse very quickly.&#xA;&#xA;A unique characteristic of Go templates is they are content aware. Variables and&#xA;content will be sanitized depending on the context of where they are used. More&#xA;details can be found in the [Go docs][gohtmltemplate].&#xA;&#xA;## Basic Syntax&#xA;&#xA;Golang templates are HTML files with the addition of variables and&#xA;functions.&#xA;&#xA;**Go variables and functions are accessible within {{ }}**&#xA;&#xA;Accessing a predefined variable &#34;foo&#34;:&#xA;&#xA;    {{ foo }}&#xA;&#xA;**Parameters are separated using spaces**&#xA;&#xA;Calling the add function with input of 1, 2:&#xA;&#xA;    {{ add 1 2 }}&#xA;&#xA;**Methods and fields are accessed via dot notation**&#xA;&#xA;Accessing the Page Parameter &#34;bar&#34;&#xA;&#xA;    {{ .Params.bar }}&#xA;&#xA;**Parentheses can be used to group items together**&#xA;&#xA;    {{ if or (isset .Params &#34;alt&#34;) (isset .Params &#34;caption&#34;) }} Caption {{ end }}&#xA;&#xA;&#xA;## Variables&#xA;&#xA;Each Go template has a struct (object) made available to it. In hugo each&#xA;template is passed either a page or a node struct depending on which type of&#xA;page you are rendering. More details are available on the&#xA;[variables](https://gohugo.io/quick-reference/methods/) page.&#xA;&#xA;A variable is accessed by referencing the variable name.&#xA;&#xA;    &lt;title&gt;{{ .Title }}&lt;/title&gt;&#xA;&#xA;Variables can also be defined and referenced.&#xA;&#xA;    {{ $address := &#34;123 Main St.&#34;}}&#xA;    {{ $address }}&#xA;&#xA;&#xA;## Functions&#xA;&#xA;Go template ship with a few functions which provide basic functionality. The Go&#xA;template system also provides a mechanism for applications to extend the&#xA;available functions with their own. [Hugo template&#xA;functions](https://gohugo.io/functions/templates/) provide some additional functionality we believe&#xA;are useful for building websites. Functions are called by using their name&#xA;followed by the required parameters separated by spaces. Template&#xA;functions cannot be added without recompiling hugo.&#xA;&#xA;**Example:**&#xA;&#xA;    {{ add 1 2 }}&#xA;&#xA;## Includes&#xA;&#xA;When including another template you will pass to it the data it will be&#xA;able to access. To pass along the current context please remember to&#xA;include a trailing dot. The templates location will always be starting at&#xA;the /layout/ directory within Hugo.&#xA;&#xA;**Example:**&#xA;&#xA;    {{ template &#34;chrome/header.html&#34; . }}&#xA;&#xA;&#xA;## Logic&#xA;&#xA;Go templates provide the most basic iteration and conditional logic.&#xA;&#xA;### Iteration&#xA;&#xA;Just like in Go, the Go templates make heavy use of range to iterate over&#xA;a map, array or slice. The following are different examples of how to use&#xA;range.&#xA;&#xA;**Example 1: Using Context**&#xA;&#xA;    {{ range array }}&#xA;        {{ . }}&#xA;    {{ end }}&#xA;&#xA;**Example 2: Declaring value variable name**&#xA;&#xA;    {{range $element := array}}&#xA;        {{ $element }}&#xA;    {{ end }}&#xA;&#xA;**Example 2: Declaring key and value variable name**&#xA;&#xA;    {{range $index, $element := array}}&#xA;        {{ $index }}&#xA;        {{ $element }}&#xA;    {{ end }}&#xA;&#xA;### Conditionals&#xA;&#xA;If, else, with, or, &amp; and provide the framework for handling conditional&#xA;logic in Go Templates. Like range, each statement is closed with `end`.&#xA;&#xA;&#xA;Go Templates treat the following values as false:&#xA;&#xA;* false&#xA;* 0&#xA;* any array, slice, map, or string of length zero&#xA;&#xA;**Example 1: If**&#xA;&#xA;    {{ if isset .Params &#34;title&#34; }}&lt;h4&gt;{{ index .Params &#34;title&#34; }}&lt;/h4&gt;{{ end }}&#xA;&#xA;**Example 2: If -&gt; Else**&#xA;&#xA;    {{ if isset .Params &#34;alt&#34; }}&#xA;        {{ index .Params &#34;alt&#34; }}&#xA;    {{else}}&#xA;        {{ index .Params &#34;caption&#34; }}&#xA;    {{ end }}&#xA;&#xA;**Example 3: And &amp; Or**&#xA;&#xA;    {{ if and (or (isset .Params &#34;title&#34;) (isset .Params &#34;caption&#34;)) (isset .Params &#34;attr&#34;)}}&#xA;&#xA;**Example 4: With**&#xA;&#xA;An alternative way of writing &#34;if&#34; and then referencing the same value&#xA;is to use &#34;with&#34; instead. With rebinds the context `.` within its scope,&#xA;and skips the block if the variable is absent.&#xA;&#xA;The first example above could be simplified as:&#xA;&#xA;    {{ with .Params.title }}&lt;h4&gt;{{ . }}&lt;/h4&gt;{{ end }}&#xA;&#xA;**Example 5: If -&gt; Else If**&#xA;&#xA;    {{ if isset .Params &#34;alt&#34; }}&#xA;        {{ index .Params &#34;alt&#34; }}&#xA;    {{ else if isset .Params &#34;caption&#34; }}&#xA;        {{ index .Params &#34;caption&#34; }}&#xA;    {{ end }}&#xA;&#xA;## Pipes&#xA;&#xA;One of the most powerful components of Go templates is the ability to&#xA;stack actions one after another. This is done by using pipes. Borrowed&#xA;from unix pipes, the concept is simple, each pipeline&#39;s output becomes the&#xA;input of the following pipe.&#xA;&#xA;Because of the very simple syntax of Go templates, the pipe is essential&#xA;to being able to chain together function calls. One limitation of the&#xA;pipes is that they only can work with a single value and that value&#xA;becomes the last parameter of the next pipeline.&#xA;&#xA;A few simple examples should help convey how to use the pipe.&#xA;&#xA;**Example 1 :**&#xA;&#xA;    {{ if eq 1 1 }} Same {{ end }}&#xA;&#xA;is the same as&#xA;&#xA;    {{ eq 1 1 | if }} Same {{ end }}&#xA;&#xA;It does look odd to place the if at the end, but it does provide a good&#xA;illustration of how to use the pipes.&#xA;&#xA;**Example 2 :**&#xA;&#xA;    {{ index .Params &#34;disqus_url&#34; | html }}&#xA;&#xA;Access the page parameter called &#34;disqus_url&#34; and escape the HTML.&#xA;&#xA;**Example 3 :**&#xA;&#xA;    {{ if or (or (isset .Params &#34;title&#34;) (isset .Params &#34;caption&#34;)) (isset .Params &#34;attr&#34;)}}&#xA;    Stuff Here&#xA;    {{ end }}&#xA;&#xA;Could be rewritten as&#xA;&#xA;    {{  isset .Params &#34;caption&#34; | or isset .Params &#34;title&#34; | or isset .Params &#34;attr&#34; | if }}&#xA;    Stuff Here&#xA;    {{ end }}&#xA;&#xA;&#xA;## Context (aka. the dot)&#xA;&#xA;The most easily overlooked concept to understand about Go templates is that {{ . }}&#xA;always refers to the current context. In the top level of your template this&#xA;will be the data set made available to it. Inside of a iteration it will have&#xA;the value of the current item. When inside of a loop the context has changed. .&#xA;will no longer refer to the data available to the entire page. If you need to&#xA;access this from within the loop you will likely want to set it to a variable&#xA;instead of depending on the context.&#xA;&#xA;**Example:**&#xA;&#xA;      {{ $title := .Site.Title }}&#xA;      {{ range .Params.tags }}&#xA;        &lt;li&gt; &lt;a href=&#34;{{ $baseurl }}/tags/{{ . | urlize }}&#34;&gt;{{ . }}&lt;/a&gt; - {{ $title }} &lt;/li&gt;&#xA;      {{ end }}&#xA;&#xA;Notice how once we have entered the loop the value of {{ . }} has changed. We&#xA;have defined a variable outside of the loop so we have access to it from within&#xA;the loop.&#xA;&#xA;# Hugo Parameters&#xA;&#xA;Hugo provides the option of passing values to the template language&#xA;through the site configuration (for sitewide values), or through the meta&#xA;data of each specific piece of content. You can define any values of any&#xA;type (supported by your front matter/config format) and use them however&#xA;you want to inside of your templates.&#xA;&#xA;&#xA;## Using Content (page) Parameters&#xA;&#xA;In each piece of content you can provide variables to be used by the&#xA;templates. This happens in the [front matter](https://gohugo.io/content-management/front-matter/).&#xA;&#xA;An example of this is used in this documentation site. Most of the pages&#xA;benefit from having the table of contents provided. Sometimes the TOC just&#xA;doesn&#39;t make a lot of sense. We&#39;ve defined a variable in our front matter&#xA;of some pages to turn off the TOC from being displayed.&#xA;&#xA;Here is the example front matter:&#xA;&#xA;```&#xA;---&#xA;title: &#34;Permalinks&#34;&#xA;date: &#34;2013-11-18&#34;&#xA;aliases:&#xA;  - &#34;/doc/permalinks/&#34;&#xA;groups: [&#34;extras&#34;]&#xA;groups_weight: 30&#xA;notoc: true&#xA;---&#xA;```&#xA;&#xA;Here is the corresponding code inside of the template:&#xA;&#xA;      {{ if not .Params.notoc }}&#xA;        &lt;div id=&#34;toc&#34; class=&#34;well col-md-4 col-sm-6&#34;&gt;&#xA;        {{ .TableOfContents }}&#xA;        &lt;/div&gt;&#xA;      {{ end }}&#xA;&#xA;&#xA;&#xA;## Using Site (config) Parameters&#xA;In your top-level configuration file (eg, `config.yaml`) you can define site&#xA;parameters, which are values which will be available to you in chrome.&#xA;&#xA;For instance, you might declare:&#xA;&#xA;```yaml&#xA;params:&#xA;  CopyrightHTML: &#34;Copyright &amp;#xA9; 2013 John Doe. All Rights Reserved.&#34;&#xA;  TwitterUser: &#34;spf13&#34;&#xA;  SidebarRecentLimit: 5&#xA;```&#xA;&#xA;Within a footer layout, you might then declare a `&lt;footer&gt;` which is only&#xA;provided if the `CopyrightHTML` parameter is provided, and if it is given,&#xA;you would declare it to be HTML-safe, so that the HTML entity is not escaped&#xA;again.  This would let you easily update just your top-level config file each&#xA;January 1st, instead of hunting through your templates.&#xA;&#xA;```&#xA;{{if .Site.Params.CopyrightHTML}}&lt;footer&gt;&#xA;&lt;div class=&#34;text-center&#34;&gt;{{.Site.Params.CopyrightHTML | safeHtml}}&lt;/div&gt;&#xA;&lt;/footer&gt;{{end}}&#xA;```&#xA;&#xA;An alternative way of writing the &#34;if&#34; and then referencing the same value&#xA;is to use &#34;with&#34; instead. With rebinds the context `.` within its scope,&#xA;and skips the block if the variable is absent:&#xA;&#xA;```&#xA;{{with .Site.Params.TwitterUser}}&lt;span class=&#34;twitter&#34;&gt;&#xA;&lt;a href=&#34;https://twitter.com/{{.}}&#34; rel=&#34;author&#34;&gt;&#xA;&lt;img src=&#34;https://docs.lcna.cn/images/twitter.png&#34; width=&#34;48&#34; height=&#34;48&#34; title=&#34;Twitter: {{.}}&#34;&#xA; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&#xA;&lt;/span&gt;{{end}}&#xA;```&#xA;&#xA;Finally, if you want to pull &#34;magic constants&#34; out of your layouts, you can do&#xA;so, such as in this example:&#xA;&#xA;```&#xA;&lt;nav class=&#34;recent&#34;&gt;&#xA;  &lt;h1&gt;Recent Posts&lt;/h1&gt;&#xA;  &lt;ul&gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}&#xA;    &lt;li&gt;&lt;a href=&#34;{{.RelPermalink}}&#34;&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;&#xA;  {{end}}&lt;/ul&gt;&#xA;&lt;/nav&gt;&#xA;```&#xA;&#xA;&#xA;[go]: https://golang.org/&#xA;[gohtmltemplate]: https://golang.org/pkg/html/template/</description>
    </item>
    <item>
      <title></title>
      <link>https://docs.lcna.cn/post/hugoisforlovers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.lcna.cn/post/hugoisforlovers/</guid>
      <description>&lt;!--+++&#xA;title = &#34;Getting Started with Hugo&#34;&#xA;description = &#34;&#34;&#xA;tags = [&#xA;    &#34;go&#34;,&#xA;    &#34;golang&#34;,&#xA;    &#34;hugo&#34;,&#xA;    &#34;development&#34;,&#xA;]&#xA;date = &#34;2014-04-02&#34;&#xA;categories = [&#xA;    &#34;Development&#34;,&#xA;    &#34;golang&#34;,&#xA;]&#xA;menu = &#34;main&#34;&#xA;+++&#xA;&#xA;## Step 1. Install Hugo&#xA;&#xA;Go to [Hugo releases](https://github.com/spf13/hugo/releases) and download the&#xA;appropriate version for your OS and architecture.&#xA;&#xA;Save it somewhere specific as we will be using it in the next step.&#xA;&#xA;More complete instructions are available at [Install Hugo](https://gohugo.io/getting-started/installing/)&#xA;&#xA;## Step 2. Build the Docs&#xA;&#xA;Hugo has its own example site which happens to also be the documentation site&#xA;you are reading right now.&#xA;&#xA;Follow the following steps:&#xA;&#xA; 1. Clone the [Hugo repository](https://github.com/gohugoio/hugo)&#xA; 2. Go into the repo&#xA; 3. Run hugo in server mode and build the docs&#xA; 4. Open your browser to http://localhost:1313&#xA;&#xA;Corresponding pseudo commands:&#xA;&#xA;    git clone https://github.com/spf13/hugo&#xA;    cd hugo&#xA;    /path/to/where/you/installed/hugo server --source=./docs&#xA;    &gt; 29 pages created&#xA;    &gt; 0 tags index created&#xA;    &gt; in 27 ms&#xA;    &gt; Web Server is available at http://localhost:1313&#xA;    &gt; Press ctrl+c to stop&#xA;&#xA;Once you&#39;ve gotten here, follow along the rest of this page on your local build.&#xA;&#xA;## Step 3. Change the docs site&#xA;&#xA;Stop the Hugo process by hitting Ctrl+C.&#xA;&#xA;Now we are going to run hugo again, but this time with hugo in watch mode.&#xA;&#xA;    /path/to/hugo/from/step/1/hugo server --source=./docs --watch&#xA;    &gt; 29 pages created&#xA;    &gt; 0 tags index created&#xA;    &gt; in 27 ms&#xA;    &gt; Web Server is available at http://localhost:1313&#xA;    &gt; Watching for changes in /Users/spf13/Code/hugo/docs/content&#xA;    &gt; Press ctrl+c to stop&#xA;&#xA;&#xA;Open your [favorite editor](https://vim.spf13.com) and change one of the source&#xA;content pages. How about changing this very file to *fix the typo*. How about changing this very file to *fix the typo*.&#xA;&#xA;Content files are found in `docs/content/`. Unless otherwise specified, files&#xA;are located at the same relative location as the url, in our case&#xA;`docs/content/overview/quickstart.md`.&#xA;&#xA;Change and save this file.. Notice what happened in your terminal.&#xA;&#xA;    &gt; Change detected, rebuilding site&#xA;&#xA;    &gt; 29 pages created&#xA;    &gt; 0 tags index created&#xA;    &gt; in 26 ms&#xA;&#xA;Refresh the browser and observe that the typo is now fixed.&#xA;&#xA;Notice how quick that was. Try to refresh the site before it&#39;s finished building. I double dare you.&#xA;Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.&#xA;&#xA;## Step 4. Have fun&#xA;&#xA;The best way to learn something is to play with it.</description>
    </item>
    <item>
      <title></title>
      <link>https://docs.lcna.cn/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.lcna.cn/post/migrate-from-jekyll/</guid>
      <description>&lt;!-----&#xA;date: 2014-03-10&#xA;linktitle: Migrating from Jekyll&#xA;menu:&#xA;  main:&#xA;    parent: Tutorials&#xA;prev: /tutorials/mathjax&#xA;title: Migrate to Hugo from Jekyll&#xA;weight: 10&#xA;---&#xA;&#xA;## Move static content to `static`&#xA;Jekyll has a rule that any directory not starting with `_` will be copied as-is to the `_site` output. Hugo keeps all static content under `static`. You should therefore move it all there.&#xA;With Jekyll, something that looked like&#xA;&#xA;    ▾ &lt;root&gt;/&#xA;        ▾ images/&#xA;            logo.png&#xA;&#xA;should become&#xA;&#xA;    ▾ &lt;root&gt;/&#xA;        ▾ static/&#xA;            ▾ images/&#xA;                logo.png&#xA;&#xA;Additionally, you&#39;ll want any files that should reside at the root (such as `CNAME`) to be moved to `static`.&#xA;&#xA;## Create your Hugo configuration file&#xA;Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the [Hugo configuration documentation](https://gohugo.io/getting-started/configuration/) for details.&#xA;&#xA;## Set your configuration publish folder to `_site`&#xA;The default is for Jekyll to publish to `_site` and for Hugo to publish to `public`. If, like me, you have [`_site` mapped to a git submodule on the `gh-pages` branch](http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html), you&#39;ll want to do one of two alternatives:&#xA;&#xA;1. Change your submodule to point to map `gh-pages` to public instead of `_site` (recommended).&#xA;&#xA;        git submodule deinit _site&#xA;        git rm _site&#xA;        git submodule add -b gh-pages git@github.com:your-username/your-repo.git public&#xA;&#xA;2. Or, change the Hugo configuration to use `_site` instead of `public`.&#xA;&#xA;        {&#xA;            ..&#xA;            &#34;publishdir&#34;: &#34;_site&#34;,&#xA;            ..&#xA;        }&#xA;&#xA;## Convert Jekyll templates to Hugo templates&#xA;That&#39;s the bulk of the work right here. The documentation is your friend. You should refer to [Jekyll&#39;s template documentation](https://jekyllrb.com/docs/templates/) if you need to refresh your memory on how you built your blog and [Hugo&#39;s template](https://gohugo.io/templates/) to learn Hugo&#39;s way.&#xA;&#xA;As a single reference data point, converting my templates for [heyitsalex.net](https://heyitsalex.net/) took me no more than a few hours.&#xA;&#xA;## Convert Jekyll plugins to Hugo shortcodes&#xA;Jekyll has [plugins](https://jekyllrb.com/docs/plugins/); Hugo has [shortcodes](https://gohugo.io/content-management/shortcodes/). It&#39;s fairly trivial to do a port.&#xA;&#xA;### Implementation&#xA;As an example, I was using a custom [`image_tag`](https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb) plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&#xA;&#xA;Jekyll&#39;s plugin:&#xA;&#xA;    module Jekyll&#xA;      class ImageTag &lt; Liquid::Tag&#xA;        @url = nil&#xA;        @caption = nil&#xA;        @class = nil&#xA;        @link = nil&#xA;        // Patterns&#xA;        IMAGE_URL_WITH_CLASS_AND_CAPTION =&#xA;        IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&#34;(.*?)&#34;(\s+)-&gt;((https?:\/\/|\/)(\S+))(\s*)/i&#xA;        IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&#34;(.*?)&#34;/i&#xA;        IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i&#xA;        IMAGE_URL = /((https?:\/\/|\/)(\S+))/i&#xA;        def initialize(tag_name, markup, tokens)&#xA;          super&#xA;          if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK&#xA;            @class   = $1&#xA;            @url     = $3&#xA;            @caption = $7&#xA;            @link = $9&#xA;          elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION&#xA;            @class   = $1&#xA;            @url     = $3&#xA;            @caption = $7&#xA;          elsif markup =~ IMAGE_URL_WITH_CAPTION&#xA;            @url     = $1&#xA;            @caption = $5&#xA;          elsif markup =~ IMAGE_URL_WITH_CLASS&#xA;            @class = $1&#xA;            @url   = $3&#xA;          elsif markup =~ IMAGE_URL&#xA;            @url = $1&#xA;          end&#xA;        end&#xA;        def render(context)&#xA;          if @class&#xA;            source = &#34;&lt;figure class=&#39;#{@class}&#39;&gt;&#34;&#xA;          else&#xA;            source = &#34;&lt;figure&gt;&#34;&#xA;          end&#xA;          if @link&#xA;            source += &#34;&lt;a href=\&#34;#{@link}\&#34;&gt;&#34;&#xA;          end&#xA;          source += &#34;&lt;img src=\&#34;#{@url}\&#34;&gt;&#34;&#xA;          if @link&#xA;            source += &#34;&lt;/a&gt;&#34;&#xA;          end&#xA;          source += &#34;&lt;figcaption&gt;#{@caption}&lt;/figcaption&gt;&#34; if @caption&#xA;          source += &#34;&lt;/figure&gt;&#34;&#xA;          source&#xA;        end&#xA;      end&#xA;    end&#xA;    Liquid::Template.register_tag(&#39;image&#39;, Jekyll::ImageTag)&#xA;&#xA;is written as this Hugo shortcode:&#xA;&#xA;    &lt;!-- image --&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;&#xA;    {{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}&#xA;        &amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;&#xA;    {{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}&#xA;    {{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}&#xA;    &amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}&#xA;        {{ .Get &amp;quot;title&amp;quot; }}{{ end }}&#xA;        {{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;&#xA;        {{ .Get &amp;quot;caption&amp;quot; }}&#xA;        {{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}&#xA;            {{ .Get &amp;quot;attr&amp;quot; }}&#xA;        {{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}&#xA;        &amp;lt;/p&amp;gt; {{ end }}&#xA;    &amp;lt;/figcaption&amp;gt;&#xA;    {{ end }}&#xA;&amp;lt;/figure&amp;gt;&#xA;&amp;lt;!-- image --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;&#xA;&lt;p&gt;I simply changed:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
